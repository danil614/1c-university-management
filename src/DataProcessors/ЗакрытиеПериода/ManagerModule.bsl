Процедура ЗакрытьПериод(ДатаЗакрытия) Экспорт
	НачалоПериода = КонецДня(Константы.ЗакрытыйПериод.Получить());
	КонецПериода = КонецДня(ДатаЗакрытия);
	
	// Запрос состоит из 7-ми частей
	// 1. Получаем всех учащихся студентов на платной основе
	// 2. Получаем среднюю оценку по предмету, отличник ли студент по предмету
	// 3. Соединяем две предыдущие таблицы, проверяем по всем ли предметам студент отличник
	// 4. Получаем таблицу для группировки по 3-ем полям: факультет, группа, курс
	// 5. Получаем последний приказ о зачислении или переводе для студентов
	// 6. Получаем последнюю сумму обучения для студентов из последнего приказа
	// 7. Соединяем все таблицы, выводим только студентов со скидкой, группируем по 3-ем полям

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УчащиесяСрезПоследних.Студент КАК Студент,
	|	УчащиесяСрезПоследних.Факультет КАК Факультет,
	|	УчащиесяСрезПоследних.УчебнаяГруппа КАК УчебнаяГруппа,
	|	УчащиесяСрезПоследних.Курс КАК Курс,
	|	УчащиесяСрезПоследних.ЯвляетсяСтаростой КАК ЯвляетсяСтаростой,
	|	УчащиесяСрезПоследних.ОбучениеНаБюджетнойОснове КАК ОбучениеНаБюджетнойОснове
	|ПОМЕСТИТЬ ВТ_Студенты
	|ИЗ
	|	РегистрСведений.Учащиеся.СрезПоследних(&КонецПериода,) КАК УчащиесяСрезПоследних
	|ГДЕ
	|	УчащиесяСрезПоследних.ОбучениеНаБюджетнойОснове = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Оценки.Студент КАК Студент,
	|	Оценки.Предмет КАК Предмет,
	|	СРЕДНЕЕ(Оценки.Оценка) КАК СредняяОценка,
	|	ВЫБОР
	|		КОГДА СРЕДНЕЕ(Оценки.Оценка) / МаксимальнаяОценкаСтудента.Значение * 100 >= 90
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОтличникПоПредмету
	|ПОМЕСТИТЬ ВТ_Оценки
	|ИЗ
	|	РегистрНакопления.Оценки КАК Оценки,
	|	Константа.МаксимальнаяОценкаСтудента КАК МаксимальнаяОценкаСтудента
	|ГДЕ
	|	Оценки.Период > &НачалоПериода
	|	И Оценки.Период <= &КонецПериода
	|СГРУППИРОВАТЬ ПО
	|	Оценки.Студент,
	|	Оценки.Предмет,
	|	МаксимальнаяОценкаСтудента.Значение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Студенты.Студент КАК Студент,
	|	ВТ_Студенты.Факультет КАК Факультет,
	|	ВТ_Студенты.УчебнаяГруппа КАК УчебнаяГруппа,
	|	ВТ_Студенты.Курс КАК Курс,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Оценки.Предмет) = СУММА(ВТ_Оценки.ОтличникПоПредмету)
	|		И КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Оценки.Предмет) > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПолучаетСкидку,
	|	ВТ_Студенты.ЯвляетсяСтаростой КАК ЯвляетсяСтаростой,
	|	ВТ_Студенты.ОбучениеНаБюджетнойОснове КАК ОбучениеНаБюджетнойОснове
	|ПОМЕСТИТЬ ВТ_СтудентыОценки
	|ИЗ
	|	ВТ_Студенты КАК ВТ_Студенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Оценки КАК ВТ_Оценки
	|		ПО ВТ_Студенты.Студент = ВТ_Оценки.Студент
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Студенты.Студент,
	|	ВТ_Студенты.Факультет,
	|	ВТ_Студенты.УчебнаяГруппа,
	|	ВТ_Студенты.Курс,
	|	ВТ_Студенты.ЯвляетсяСтаростой,
	|	ВТ_Студенты.ОбучениеНаБюджетнойОснове
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_СтудентыОценки.Факультет КАК Факультет,
	|	ВТ_СтудентыОценки.УчебнаяГруппа КАК УчебнаяГруппа,
	|	ВТ_СтудентыОценки.Курс КАК Курс,
	|	АВТОНОМЕРЗАПИСИ() КАК ИдентификаторНабора
	|ПОМЕСТИТЬ ВТ_РеквизитыШапки
	|ИЗ
	|	ВТ_СтудентыОценки КАК ВТ_СтудентыОценки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Взаиморасчеты.Студент КАК Студент,
	|	МАКСИМУМ(Взаиморасчеты.Регистратор) КАК Регистратор,
	|	Взаиморасчеты.ВидДвижения КАК ВидДвижения
	|ПОМЕСТИТЬ ВТ_ПоследнийПриказ
	|ИЗ
	|	РегистрНакопления.Взаиморасчеты КАК Взаиморасчеты
	|ГДЕ
	|	Взаиморасчеты.Период <= &КонецПериода
	|	И (Взаиморасчеты.Регистратор ССЫЛКА Документ.ПриказОЗачислении
	|	ИЛИ Взаиморасчеты.Регистратор ССЫЛКА Документ.ПриказОПереводе)
	|	И Взаиморасчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|СГРУППИРОВАТЬ ПО
	|	Взаиморасчеты.Студент,
	|	Взаиморасчеты.ВидДвижения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПоследнийПриказ.Студент КАК Студент,
	|	Взаиморасчеты.Сумма КАК Сумма
	|ПОМЕСТИТЬ ВТ_ПоследняяСуммаОбучения
	|ИЗ
	|	ВТ_ПоследнийПриказ КАК ВТ_ПоследнийПриказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Взаиморасчеты КАК Взаиморасчеты
	|		ПО ВТ_ПоследнийПриказ.Студент = Взаиморасчеты.Студент
	|		И ВТ_ПоследнийПриказ.Регистратор = Взаиморасчеты.Регистратор
	|		И ВТ_ПоследнийПриказ.ВидДвижения = Взаиморасчеты.ВидДвижения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_РеквизитыШапки.ИдентификаторНабора КАК ИдентификаторНабора,
	|	ВТ_РеквизитыШапки.Факультет КАК Факультет,
	|	ВТ_РеквизитыШапки.УчебнаяГруппа КАК УчебнаяГруппа,
	|	ВТ_РеквизитыШапки.Курс КАК Курс,
	|	ВТ_СтудентыОценки.Студент КАК Студент,
	|	ВТ_СтудентыОценки.ЯвляетсяСтаростой КАК ЯвляетсяСтаростой,
	|	ВТ_СтудентыОценки.ОбучениеНаБюджетнойОснове КАК ОбучениеНаБюджетнойОснове,
	|	ВТ_ПоследняяСуммаОбучения.Сумма КАК СуммаОбучения
	|ИЗ
	|	ВТ_СтудентыОценки КАК ВТ_СтудентыОценки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_РеквизитыШапки КАК ВТ_РеквизитыШапки
	|		ПО ВТ_СтудентыОценки.Факультет = ВТ_РеквизитыШапки.Факультет
	|		И ВТ_СтудентыОценки.УчебнаяГруппа = ВТ_РеквизитыШапки.УчебнаяГруппа
	|		И ВТ_СтудентыОценки.Курс = ВТ_РеквизитыШапки.Курс
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПоследняяСуммаОбучения КАК ВТ_ПоследняяСуммаОбучения
	|		ПО ВТ_СтудентыОценки.Студент = ВТ_ПоследняяСуммаОбучения.Студент
	|ГДЕ
	|	ВТ_СтудентыОценки.ПолучаетСкидку
	|ИТОГИ
	|	МАКСИМУМ(Факультет),
	|	МАКСИМУМ(УчебнаяГруппа),
	|	МАКСИМУМ(Курс)
	|ПО
	|	ИдентификаторНабора";

	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаПоНаборам = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Пока ВыборкаПоНаборам.Следующий() Цикл
		// Создаем приказ о переводе
		Приказ = Документы.ПриказОПереводе.СоздатьДокумент();
		Приказ.Дата = ПолучитьОперативнуюОтметкуВремени();
		// Текущие данные
		Приказ.ТекущийФакультет = ВыборкаПоНаборам.Факультет;
		Приказ.ТекущаяГруппа = ВыборкаПоНаборам.УчебнаяГруппа;
		Приказ.ТекущийКурс = ВыборкаПоНаборам.Курс;
		// Новые данные
		Приказ.НовыйФакультет = ВыборкаПоНаборам.Факультет;
		Приказ.НоваяГруппа = ВыборкаПоНаборам.УчебнаяГруппа;
		Приказ.НовыйКурс = ВыборкаПоНаборам.Курс + 1;

		ДетальныеЗаписи = ВыборкаПоНаборам.Выбрать();

		Пока ДетальныеЗаписи.Следующий() Цикл
			Студент = Приказ.Студенты.Добавить();
			Студент.Студент = ДетальныеЗаписи.Студент;
			Студент.ЯвляетсяСтаростой = ДетальныеЗаписи.ЯвляетсяСтаростой;
			Студент.ОбучениеНаБюджетнойОснове = ДетальныеЗаписи.ОбучениеНаБюджетнойОснове;
			// Делаем скидку 10% на обучение
			Студент.СуммаОбучения = ДетальныеЗаписи.СуммаОбучения * 0.9;
		КонецЦикла;

		Приказ.Записать(РежимЗаписиДокумента.Запись);
	КонецЦикла;

	Константы.ЗакрытыйПериод.Установить(КонецПериода);
КонецПроцедуры